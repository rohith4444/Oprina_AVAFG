# =============================================================================
# Oprina Environment Configuration - ADK Memory Migration
# Copy this file to .env and fill in your actual values
# =============================================================================

# =============================================================================
# ADK Memory Service Configuration (NEW)
# =============================================================================

# Memory Service Configuration
# Options: "inmemory" (development) or "vertexai_rag" (production)
MEMORY_SERVICE_TYPE=inmemory

# Session Service Configuration  
# Options: "inmemory" (development) or "database" (production)
SESSION_SERVICE_TYPE=inmemory

# ADK Application Name
ADK_APP_NAME=oprina

# Vertex AI RAG Configuration (for production memory service)
# Get Project ID from: https://console.cloud.google.com/
VERTEX_AI_PROJECT_ID=your-gcp-project-id
VERTEX_AI_LOCATION=us-central1
VERTEX_AI_RAG_CORPUS_ID=oprina-memory-corpus

# ADK Session Configuration
ADK_SESSION_TTL_SECONDS=86400
MEMORY_RETENTION_DAYS=30
SESSION_CLEANUP_INTERVAL_HOURS=6

# =============================================================================
# Database & Storage Settings
# =============================================================================

# Supabase Configuration
# Get these from your Supabase project dashboard
SUPABASE_URL=https://your-project-id.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_DATABASE_PASSWORD=your-database-password

# Chat History (for UI only - separate from ADK)
CHAT_HISTORY_ENABLED=true

# =============================================================================
# Google Cloud & AI Settings  
# =============================================================================

# Google API Key (for Gemini models)
# Get from: https://makersuite.google.com/app/apikey
GOOGLE_API_KEY=AIzaSyDxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Google OAuth Configuration
GOOGLE_CLIENT_SECRET_FILE=credentials/client_secret_7774023189-5ga9j3epn8nja2aumfnmf09mh10osquh.apps.googleusercontent.com.json
GOOGLE_TOKEN_FILE=credentials/token.json

# Google API Features
GOOGLE_GMAIL_ENABLED=true
GOOGLE_CALENDAR_ENABLED=false

# =============================================================================
# ADK & Agent Settings
# =============================================================================

# ADK Model Configuration
ADK_MODEL=gemini-2.5-flash-preview-05-20
VOICE_MODEL=gemini-2.5-flash-exp-native-audio-thinking-dialog
COORDINATOR_MODEL=gemini-1.5-flash
EMAIL_MODEL=gemini-2.5-flash-preview-05-20
CONTENT_MODEL=gemini-2.5-flash-preview-05-20
CALENDAR_MODEL=gemini-2.5-flash-preview-05-20

# =============================================================================
# Application Settings
# =============================================================================

# Environment
ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO

# API Server
API_HOST=0.0.0.0
API_PORT=8000

# Frontend
FRONTEND_URL=http://localhost:3000

# Rate Limiting
GMAIL_API_RATE_LIMIT=100

# =============================================================================
# Security Settings
# =============================================================================

# JWT Configuration
# IMPORTANT: Change this in production!
JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# CORS Origins (comma-separated)
ALLOWED_ORIGINS=http://localhost:3000,https://bolt.new

# =============================================================================
# Feature Flags
# =============================================================================

# Core Features
ENABLE_VOICE_PROCESSING=true
ENABLE_AVATAR_ANIMATION=true
ENABLE_EMAIL_SENDING=false

# ADK Memory Features (NEW)
ENABLE_CROSS_SESSION_MEMORY=true
ENABLE_SESSION_PERSISTENCE=true

# =============================================================================
# Development Settings
# =============================================================================

# For development/testing only
TEST_USER_EMAIL=test@example.com
MOCK_GMAIL_API=false

# =============================================================================
# Production-Only Settings
# =============================================================================

# When ready for production, change these settings:
# ENVIRONMENT=production
# DEBUG=false
# MEMORY_SERVICE_TYPE=vertexai_rag
# SESSION_SERVICE_TYPE=database
# 
# And ensure you have:
# - Valid SUPABASE_DATABASE_PASSWORD
# - Valid VERTEX_AI_PROJECT_ID and VERTEX_AI_RAG_CORPUS_ID
# - Changed JWT_SECRET_KEY to a secure random value

# =============================================================================
# Migration Notes
# =============================================================================

# This configuration supports the ADK memory migration:
# 
# Phase 1 (Development):
# - MEMORY_SERVICE_TYPE=inmemory
# - SESSION_SERVICE_TYPE=inmemory
# - No external dependencies needed
# 
# Phase 2 (Session Persistence):
# - SESSION_SERVICE_TYPE=database  
# - Requires valid SUPABASE_DATABASE_PASSWORD
# - Sessions persist across app restarts
#
# Phase 3 (Production Memory):
# - MEMORY_SERVICE_TYPE=vertexai_rag
# - Requires Google Cloud setup with Vertex AI RAG
# - Cross-session semantic memory search

# =============================================================================
# Setup Instructions for ADK Migration
# =============================================================================

# 1. Copy this file to .env:
#    cp .env.example .env

# 2. For development (immediate start):
#    - Set MEMORY_SERVICE_TYPE=inmemory
#    - Set SESSION_SERVICE_TYPE=inmemory
#    - Fill in GOOGLE_API_KEY and SUPABASE_URL/ANON_KEY
#    - Run: python config/settings.py to test

# 3. For session persistence:
#    - Set SESSION_SERVICE_TYPE=database
#    - Fill in SUPABASE_DATABASE_PASSWORD
#    - Test database connection

# 4. For production memory (later):
#    - Set MEMORY_SERVICE_TYPE=vertexai_rag
#    - Set up Google Cloud project
#    - Create Vertex AI RAG corpus
#    - Fill in VERTEX_AI_PROJECT_ID and VERTEX_AI_RAG_CORPUS_ID

# 5. Test your configuration:
#    python config/settings.py

 