# =============================================================================
# OPRINA AI AGENT - ROOT ENVIRONMENT CONFIGURATION
# =============================================================================
#
# üìÅ FILE LOCATION: Place this file in your PROJECT ROOT as `.env`
# 
# üîß WHY IN ROOT DIRECTORY:
# - ADK commands (`adk web`, `adk run`) automatically call load_dotenv() from root
# - Vertex deployment (`python -m vertex-deployment.deploy`) calls load_dotenv() from root  
# - Both systems expect to run from project root directory
#
# üîÑ HOW IT'S USED:
# 1. When you run `adk web` or `adk run` ‚Üí ADK calls load_dotenv() ‚Üí loads this file
# 2. When you run vertex deployment ‚Üí deploy.py calls load_dotenv() ‚Üí loads this file
# 3. load_dotenv() updates system environment variables for that Python process
# 4. Oprina agents use os.getenv() ‚Üí reads the updated system environment
# 5. Changes here immediately affect both local ADK testing AND vertex deployment
#
# ‚ö†Ô∏è CRITICAL ENVIRONMENT BEHAVIOR DIFFERENCE:
# - ADK (`adk run`): OVERRIDES system environment variables with .env values
# - Vertex Deployment: load_dotenv() ONLY loads variables NOT already set in system
#   ‚Üí If you have system env vars set, vertex deployment will use those instead of .env!
#   ‚Üí To use .env values, unset system variables first: unset VARIABLE_NAME
#
# üéØ FILE SCOPE:
# This .env file is ONLY for:
# - oprina/ folder (AI agents)
# - vertex-deployment/ folder (deployment scripts)
# 
# Other components have separate .env files:
# - backend/.env (FastAPI backend configuration)
# - frontend/.env (React frontend configuration)
#
# üéØ CONFIGURATION MODES:
# - Local Development: Minimal config (Project ID + Location)
# - Production Deployment: Full config (includes Supabase + Encryption for token storage)
#
# =============================================================================

# =============================================================================
# ‚òÅÔ∏è GOOGLE CLOUD CONFIGURATION (REQUIRED)
# =============================================================================

# Your Google Cloud Project ID - Get from Google Cloud Console
# REQUIRED FOR: Local development AND production deployment
GOOGLE_CLOUD_PROJECT=your-project-id

# Vertex AI Configuration - Required for AI agent functionality
# REQUIRED FOR: Local development AND production deployment
GOOGLE_GENAI_USE_VERTEXAI=1
GOOGLE_CLOUD_LOCATION=us-central1

# Google Cloud Storage Bucket - Required for vertex deployment only
# REQUIRED FOR: Production deployment only
# FORMAT: gs://your-bucket-name
GOOGLE_CLOUD_STAGING_BUCKET=gs://your-bucket-name

# =============================================================================
# üîê OAUTH CONFIGURATION (REQUIRED FOR DEPLOYMENT)
# =============================================================================

# Google OAuth Client Credentials - Get from Google Cloud Console > APIs & Services > Credentials
# REQUIRED FOR: Production deployment (backend saves tokens in Supabase)
# NOT NEEDED FOR: Local development (uses local pickle files)
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# =============================================================================
# üîí SECURITY CONFIGURATION (REQUIRED FOR DEPLOYMENT)
# =============================================================================

# Encryption Key - Used to encrypt OAuth tokens stored in database
# REQUIRED FOR: Production deployment (secure token storage)
# NOT NEEDED FOR: Local development
# GENERATE WITH: python -c "import base64, os; print(base64.b64encode(os.urandom(32)).decode())"
ENCRYPTION_KEY=your-encryption-key-here

# =============================================================================
# üóÑÔ∏è DATABASE CONFIGURATION (REQUIRED FOR DEPLOYMENT)
# =============================================================================

# Supabase Database Configuration - Get from Supabase project settings
# REQUIRED FOR: Production deployment (stores user data and encrypted tokens)
# NOT NEEDED FOR: Local development

# Supabase Database URL - Get from Supabase project settings
SUPABASE_URL=https://your-project-id.supabase.co

# Supabase Anonymous Key - Get from Supabase project API settings
SUPABASE_KEY=your-supabase-anon-key-here

# Supabase Service Role Key - Get from Supabase project API settings  
# Used for admin operations and backend authentication
SUPABASE_SERVICE_KEY=your-supabase-service-role-key-here

# =============================================================================
# üìù SETUP INSTRUCTIONS
# =============================================================================
#
# 1. Copy this file to `.env` in your project root:
#    cp .env.example .env
#
# 2. Replace all placeholder values with your actual credentials
#
# 3. MINIMAL SETUP (Local Development Only):
#    - GOOGLE_CLOUD_PROJECT=your-project-id
#    - GOOGLE_GENAI_USE_VERTEXAI=1
#    - GOOGLE_CLOUD_LOCATION=us-central1
#
# 4. FULL SETUP (Production Deployment):
#    - All minimal setup variables above, PLUS:
#    - GOOGLE_CLOUD_STAGING_BUCKET=gs://your-bucket
#    - GOOGLE_CLIENT_ID=your-oauth-client-id
#    - GOOGLE_CLIENT_SECRET=your-oauth-client-secret
#    - ENCRYPTION_KEY=your-generated-encryption-key
#    - SUPABASE_URL=https://your-project.supabase.co
#    - SUPABASE_KEY=your-supabase-anon-key
#    - SUPABASE_SERVICE_KEY=your-supabase-service-key
#
# 5. Test your configuration:
#    # Local development test:
#    adk web  # Should work with minimal setup
#    
#    # Deployment test:
#    python -m vertex-deployment.deploy --list  # Requires full setup
#
# 6. Token Storage Explained:
#    - LOCAL: OAuth tokens saved as pickle files (gmail_token.pickle, calendar_token.pickle)
#    - DEPLOYMENT: OAuth tokens encrypted and stored in Supabase database
#
# =============================================================================
# üö® CRITICAL WARNING - ENVIRONMENT VARIABLE BEHAVIOR
# =============================================================================
#
# IMPORTANT DIFFERENCE BETWEEN ADK AND VERTEX DEPLOYMENT:
#
# üü¢ ADK Commands (adk web, adk run):
#    ‚Üí OVERRIDES system environment variables with .env file values
#    ‚Üí Your .env file values will always be used
#
# üü° Vertex Deployment (python -m vertex-deployment.deploy):
#    ‚Üí load_dotenv() ONLY loads variables NOT already in system environment
#    ‚Üí If you have system env vars set, those will be used instead of .env!
#    ‚Üí This can cause unexpected deployment failures or wrong configurations
#
# üõ†Ô∏è SOLUTION: Before deployment, check and unset conflicting system variables:
#    env | grep GOOGLE_CLOUD_PROJECT  # Check if system var exists
#    unset GOOGLE_CLOUD_PROJECT       # Remove it to use .env value
#
# REMEMBER: This .env is for oprina/ and vertex-deployment/ folders only!
# Backend and frontend have their own separate .env files.
#
# =============================================================================

# =============================================================================
# üö® SECURITY WARNING
# =============================================================================
#
# NEVER commit the actual .env file to git!
# - Add .env to your .gitignore file
# - Only commit .env.example with placeholder values
# - Keep your real credentials secure and private
# - The ENCRYPTION_KEY is especially sensitive - store securely
#
# =============================================================================

# =============================================================================
# üîß TROUBLESHOOTING
# =============================================================================
#
# Local Development Issues:
# - Check: GOOGLE_CLOUD_PROJECT is set correctly
# - Check: gcloud auth application-default login is completed
# - Check: ADK is installed: pip install google-cloud-aiplatform[adk]
#
# Deployment Issues:
# - Check: All FULL SETUP variables are configured
# - Check: Google Cloud Storage bucket exists and is accessible
# - Check: Supabase project is set up with proper tables
# - Check: Google OAuth credentials are properly configured
#
# ‚ö†Ô∏è CRITICAL: Environment Variable Conflicts
# Problem: Vertex deployment not using .env values
# Cause: You have system environment variables set that override .env
# Solution: Unset conflicting system variables before deployment:
#   unset GOOGLE_CLOUD_PROJECT
#   unset SUPABASE_URL
#   unset ENCRYPTION_KEY
#   # Then run deployment - it will use .env values
#
# Check what system variables are set:
#   env | grep GOOGLE_CLOUD_PROJECT
#   env | grep SUPABASE
#   env | grep ENCRYPTION
#
# Remember: ADK overrides system vars, but vertex deployment does NOT!
#
# =============================================================================