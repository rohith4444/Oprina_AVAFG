# =============================================================================
# OPRINA BACKEND API - LOCAL DEVELOPMENT ENVIRONMENT
# =============================================================================
#
# üìÅ FILE LOCATION: backend/.env (copy this file and rename)
#
# üîß WHY SEPARATE FROM ROOT .env:
# - Root .env: Used by oprina agents (ADK/vertex deployment) 
# - Backend .env: Used by FastAPI backend (pydantic-settings)
# - Different systems, different purposes, different loading mechanisms
#
# üîÑ HOW IT'S LOADED:
# - Pydantic-settings automatically loads backend/.env when running from backend/
# - config.py get_env_file() function determines which .env file to use
# - Only loaded when ENVIRONMENT != "production" (local development)
#
# üöÄ SETUP:
# 1. Copy this file: cp .env.example .env
# 2. Replace all placeholder values with your real credentials
# 3. Run backend: cd backend && python -m app.main
#
# =============================================================================

# =============================================================================
# üèóÔ∏è APPLICATION SETTINGS
# =============================================================================

# Application Environment
ENVIRONMENT=development
DEBUG=true

# Server Configuration (optional - has defaults)
HOST=0.0.0.0
PORT=8000

# API Configuration (optional - has defaults) 
API_TITLE=Oprina API
API_VERSION=1.0.0

# =============================================================================
# üóÑÔ∏è SUPABASE CONFIGURATION (REQUIRED)
# =============================================================================

# Supabase Database - Get from Supabase project settings
SUPABASE_URL=https://your-project-id.supabase.co

# Supabase Anonymous Key - Get from Supabase project API settings  
SUPABASE_ANON_KEY=your-supabase-anon-key-here

# Supabase Service Role Key - Get from Supabase project API settings
# Used for admin operations and bypassing RLS
SUPABASE_SERVICE_KEY=your-supabase-service-role-key-here

# Supabase JWT Secret - Get from Supabase project API settings
# Used to validate tokens from frontend (NOT to create them)
SUPABASE_JWT_SECRET=your-supabase-jwt-secret-here

# =============================================================================
# üîê GOOGLE OAUTH (REQUIRED for Gmail/Calendar features)
# =============================================================================

# Google OAuth - Get from Google Cloud Console ‚Üí Credentials
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_REDIRECT_URI=http://localhost:8000/api/v1/oauth/callback

# OAuth Scopes (optional - have defaults)
GOOGLE_GMAIL_SCOPES=openid email profile https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.send https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.compose
GOOGLE_CALENDAR_SCOPES=openid email profile https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events
GOOGLE_AUTH_SCOPES=openid email profile

# =============================================================================
# ü§ñ AI SERVICES (REQUIRED for AI features)
# =============================================================================

# Vertex AI Agent - Get from Google Cloud Console
VERTEX_AI_AGENT_ID=your-vertex-ai-agent-id

# Google Cloud Configuration
GOOGLE_CLOUD_PROJECT=your-google-cloud-project-id
GOOGLE_CLOUD_LOCATION=us-central1

# =============================================================================
# üéôÔ∏è VOICE SERVICES (OPTIONAL - for voice features)
# =============================================================================

# Google Cloud Voice Services (optional - Cloud Run handles automatically)
GOOGLE_APPLICATION_CREDENTIALS=./credentials/service-account.json

# Voice Service Settings (optional - have defaults)
VOICE_MAX_AUDIO_SIZE_MB=10
VOICE_MAX_TEXT_LENGTH=5000
VOICE_DEFAULT_LANGUAGE=en-US
VOICE_DEFAULT_VOICE_NAME=en-US-Neural2-F
VOICE_DEFAULT_SPEAKING_RATE=1.0
VOICE_DEFAULT_AUDIO_FORMAT=mp3

# =============================================================================
# üé≠ AVATAR SERVICES (OPTIONAL - for avatar features)
# =============================================================================

# HeyGen Avatar API
HEYGEN_API_KEY=your-heygen-api-key
HEYGEN_API_URL=https://api.heygen.com

# =============================================================================
# üåê FRONTEND INTEGRATION
# =============================================================================

# Frontend URL - Used for OAuth redirects and CORS
FRONTEND_URL=http://localhost:5173

# Backend URL - Used for API base URL
BACKEND_API_URL=http://localhost:8000

# CORS Origins (comma-separated list)
CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost:3001

# =============================================================================
# üîß OPTIONAL SETTINGS (have defaults)
# =============================================================================

# Admin Security (for admin endpoints)
ADMIN_TOKEN=dev-admin-token-change-in-production

# Background Task Settings
ENABLE_BACKGROUND_TASKS=true
TOKEN_REFRESH_INTERVAL_MINUTES=30
CLEANUP_INTERVAL_HOURS=6

# Logging Configuration
LOG_LEVEL=INFO

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60

# =============================================================================
# üö® AUTHENTICATION NOTES
# =============================================================================
#
# SUPABASE AUTHENTICATION:
# - This backend uses Supabase authentication (not custom JWT)
# - Frontend sends Supabase tokens ‚Üí backend validates with SUPABASE_JWT_SECRET
# - No custom JWT creation - all handled by Supabase
# - get_current_user_supabase() is the main auth dependency
#
# TOKEN FLOW:
# 1. User logs in via frontend (Supabase)
# 2. Frontend gets Supabase token
# 3. Frontend sends token to backend
# 4. Backend validates with SUPABASE_JWT_SECRET
# 5. Backend creates/syncs user in database
#
# =============================================================================
# üß™ TESTING YOUR SETUP
# =============================================================================
#
# 1. Start the backend server:
#    cd backend
#    python -m app.main
#
# 2. Check health endpoint:
#    curl http://localhost:8000/api/v1/health/ping
#
# 3. Check API documentation:
#    Open http://localhost:8000/docs
#
# 4. Test Supabase connection:
#    curl http://localhost:8000/api/v1/test/supabase
#
# 5. Test OAuth setup:
#    Open http://localhost:8000/api/v1/oauth/connect/gmail
#
# =============================================================================